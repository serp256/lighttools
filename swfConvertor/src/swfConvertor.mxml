<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   width="500" height="296">
	
	<fx:Script>
		<![CDATA[
			import flash.filters.GlowFilter;
			
			import mx.controls.Alert;
			import mx.events.FileEvent;
			import mx.graphics.codec.PNGEncoder;				
			
			private var png:PNGEncoder = new PNGEncoder();
			private var folderUrl:String; // путь папки
			private var classes:Array;  // списки классов swf-ок
			private var liArray:Array;  // of LoaderInfo каждой картинки
			private var urls:Array;		// пути картинок
			private var fnames:Array;   // названия картинок
			private var index:uint = 0;
			private var bgBitmapData:BitmapData;
			private var btShow:Button; //кнопка Перейти к папке результата
			private var iconSize:Number; //размер векторной иконки
			private var vCenter:Number; // смещение по Y от центра
			
			
			//выбрать swf-ки
			protected function btPath_clickHandler(event:MouseEvent):void
			{
				var f:File = new File();
				f.addEventListener(FileListEvent.SELECT_MULTIPLE, onSelect);
				f.browseForOpenMultiple('Выберите файлы', [new FileFilter('SWF-файлы, PNG-файлы', '*.swf;*.png')]);
			}
			
			//выбрать подложку
			protected function btPath0_clickHandler(event:MouseEvent):void
			{
				var f:File = new File();
				f.addEventListener(Event.SELECT, onSelectBg);
				f.browseForOpen('Выберите png-файл', [new FileFilter('png-файл', '*.png')]);
			}
			
			// выбрана подложка под картинки
			private function onSelectBg(event:Event):void {
				var f:File = event.currentTarget as File;
				f.removeEventListener(Event.SELECT, onSelectBg);
				
				tiPath0.text = f.url;
				var loader:Loader = new Loader();
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onLoadBgComplete);
				loader.load(new URLRequest(f.url));
			}
			
			// загружена подложка под картинки
			private function onLoadBgComplete(event:Event):void {
				var li:LoaderInfo = event.target as LoaderInfo;
				status = 'подложка загружена';
				bgBitmapData = (li.content as Bitmap).bitmapData;
			}
			
			// выбрали swf-ки, начинаем их загрузку
			private function onSelect(event:FileListEvent):void {	
				status = 'загрузка...';
				
				var f:File = event.currentTarget as File;
				f.removeEventListener(FileListEvent.SELECT_MULTIPLE, onSelect);
				
				classes = [];
				liArray = [];
				urls = [];
				fnames = [];
				index = 0;
				
				// сохраняем пути и имена файлов
				folderUrl = (event.files[0].parent as File).url;
				tiPath.text = folderUrl; 
			
				for each (f in event.files) {
					urls.push(f.url);
					fnames.push(f.name.substr(0, f.name.indexOf('.')));
				}
				
				loadSwf();
			}
			
			// начинаем загрузку swf-ки
			private function loadSwf():void {
				var loader:Loader = new Loader();
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onLoadComplete);
				loader.load(new URLRequest(urls[index]));
			}
			
			// swf загружена
			private function onLoadComplete(event:Event):void {
				
				trace('onLoadComplete', index, urls[index]);
				var li:LoaderInfo = event.target as LoaderInfo;
				var fname:String = fnames[index];
				liArray[fname] = li;
				
				if (li.content is Bitmap) {
					classes[fname] = fname;
				} else {
					var names:Array= getDefinitionNames(li);
					if (names && names.length > 0) {
						classes[fname] = names[0];
					}
				}
				
				index++;
				if (index < urls.length) {
					loadSwf();
				} else {
					status = "загрузка завершена";
					btConvert.enabled = true;
				}
			}
			
			// нажали Конвертировать
			protected function btConvert_clickHandler(event:MouseEvent):void
			{
				btConvert.enabled = false;
				if (btShow && btShow.parent == gpButtons) {
					gpButtons.removeElement(btShow);
				}
				status="конвертация...";
				
				// размер векторных иконок (если подложка меньше, скейлим под ее размер)
				iconSize = Number(tiSize.text);
				if (bgBitmapData && bgBitmapData.width < iconSize){
					iconSize = bgBitmapData.width;
					tiSize.text = String(iconSize);
				}
				vCenter = Number(ti_vCenter.text);
				for (var fname:String in liArray) { // по файлам
					var li:LoaderInfo = liArray[fname];
					if (li.content is Bitmap){
						content = li.content;
					} else {
						var cName:String = classes[fname]; // имя класса
						var Cls:Class = li.applicationDomain.getDefinition(cName) as Class; // класс
						var content:DisplayObject = new Cls(); //экземпляр
					}
					convert(content, fname);
				}
				status = 'конвертация завершена';
				btConvert.enabled = true;
				
				if (!btShow) {
					btShow = new Button();
					btShow.label = 'Перейти к папке результата';
					btShow.addEventListener(MouseEvent.CLICK, onShowResult);
				}
				gpButtons.addElement(btShow);
			}
			
			// показать папку с результатом
			private function onShowResult(event:MouseEvent):void {
				var f:File = new File(folderUrl+'/pngs');
				f.openWithDefaultApplication();
			}
			
			//конвертация файла
			private function convert(content:DisplayObject, fname:String):void {
				var isBitmap:Boolean = content is Bitmap;
				var shift:uint = (isBitmap) ? 0 : 4;
				
				// вектор можно масштабировать, если задан размер
				if (!isBitmap && iconSize > 0){
					content.scaleX = content.scaleY = (content.width > content.height) ? (iconSize-shift)/content.width : (iconSize-shift)/content.height;
				}
				if (cbGlow.selected) {
					content.filters = [new GlowFilter(0xFFFFFF, 1, 24, 24, 1.7)];
				}
				
				if (bgBitmapData) { //есть подложка
					bd = bgBitmapData.clone();
				} else { //нет подложки
					var bd:BitmapData = new BitmapData(content.width +shift, content.height + shift, true, 0x000000);
				}
				var m:Matrix = new Matrix();
				m.scale(content.scaleX, content.scaleY);
				m.tx = (bd.width - content.width)/2;
				m.ty = (bd.height - content.height)/2 + vCenter;
				
				// смещаем иконку по Y относительно центра
				if (vCenter != 0) {
					if (m.ty < 0) {
						m.ty = shift;
					} else
					if (m.ty + content.height > bgBitmapData.height) {
						m.ty = bgBitmapData.height - content.height - shift;
					}
				}
			
				bd.draw(content, m, new ColorTransform(1,1,1, content.alpha),null, null, true);
					
				var ba:ByteArray = png.encode(bd);
				
				try {
					var fs:FileStream = new FileStream();
					fs.open(new File(folderUrl+'/pngs/'+fname+'.png'), FileMode.WRITE);
					fs.writeBytes(ba);
					fs.close();
				} catch (error:Error) { 
					Alert.show('Ошибка записи файла\n'+(folderUrl+'/'+fname), 'Ошибка');
				}
			}
			 
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:RadioButtonGroup id="rgMode"/>
		<!-- Разместить невизуальные элементы (например, службы или объекты значений) -->
	</fx:Declarations>
	
	<s:VGroup left="20" right="20" horizontalAlign="left" verticalCenter="0">
		<s:HGroup width="100%" height="50" verticalAlign="bottom">
			<s:VGroup width="100%">
				<s:Label text="Выберите swf/png файлы:"/>
				<s:TextInput id="tiPath" x="43" y="58" width="100%" enabled="false"/>
			</s:VGroup>
			<s:Button id="btPath" x="602" y="58" width="35" label="..."
					  click="btPath_clickHandler(event)"/>
		</s:HGroup>
		<s:HGroup width="100%" height="50" verticalAlign="bottom">
			<s:VGroup width="100%">
				<s:Label text="Выберите png-подложку:"/>
				<s:TextInput id="tiPath0" x="43" y="58" width="100%" enabled="false"/>
			</s:VGroup>
			<s:Button id="btPath0" x="602" y="58" width="35" label="..."
					  click="btPath0_clickHandler(event)"/>
		</s:HGroup>
		<s:HGroup width="100%" verticalAlign="bottom">
			<s:Label text="Размер иконок (только для swf)"/>
			<s:TextInput id="tiSize" width="50" text="160"/>
		</s:HGroup>
		<s:HGroup width="100%" height="23" gap="20" verticalAlign="bottom">
			<s:Label text="vCenter (если есть подложка)    "/>
			<s:TextInput id="ti_vCenter" width="50" text="0"/>
		</s:HGroup>
		<s:CheckBox id="cbGlow" label="Свечение"/>
		<s:HGroup id="gpButtons" width="100%" gap="10" horizontalAlign="center" paddingTop="20"
				  verticalAlign="middle">
			<s:Button id="btConvert" y="140" label="Конвертировать" click="btConvert_clickHandler(event)"
				  enabled="false" horizontalCenter="-1"/>
		</s:HGroup>
	</s:VGroup>
</s:WindowedApplication>
