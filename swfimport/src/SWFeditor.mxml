<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   applicationComplete="init()" width="560" height="530">
	<fx:Declarations>
		<!-- Разместить невизуальные элементы (например, службы или объекты значений) -->
		<s:RadioButtonGroup id="cheatRG"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.graphics.codec.PNGEncoder;
			
			import org.osmf.utils.URL;
			
			private var loader:Loader;
			public var cutClip:MovieClip;
			public var cutSprite:Sprite;
			public var f:File = new File();
			public var fs:FileStream = new FileStream();
			public var bitmaps:Array = [];
			public var framesData:Array = [];
			
			public var bdatas:Vector.<BitmapData> = new Vector.<BitmapData>(); // массив будущих png
			
			public var almostPng:Bitmap;
			public var png:PNGEncoder = new PNGEncoder();
			public var mainPartPath:String;
			public var sizes:Array = [128,256,512,1024,2048];
			public var desWidth: int = -1;
			public var desHeight: int = -1;
			public var matScaleX: Number = 1;
			public var matScaleY: Number = 1;
			public var swfName: String;
			public var isLink:Boolean = false;
			public var clipWidth: Number;
			public var clipHeight: Number;
			
			public function init():void {
				stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
				isLink = chbLink.selected;
			}
			
			private function onKeyDown(event:KeyboardEvent):void {
				if (event.keyCode == Keyboard.F) {
					stage.displayState = (stage.displayState == StageDisplayState.NORMAL) ? StageDisplayState.FULL_SCREEN : StageDisplayState.NORMAL;
				} else if (event.keyCode == Keyboard.L) {
					reload();
				}
			}
			
			private function onSelect(event:Event = null):void {
				status = 'загрузка...';
				
				loader = new Loader();
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onLoadComplete);
				loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, onIOError);
				f.removeEventListener(Event.SELECT, onSelect);
				try {
					if (event) {
						swfName = (event.currentTarget as File).url;
						title = 'SWFeditor - '+ swfName;
				//		changeResolution(null);
					} 
					loader.load(new URLRequest(swfName)) 
				} catch (e:Error) {
					trace('dont loaded', e);
				}
			}
			
			// swf загружена
			private function onLoadComplete(event:Event):void {
							
				cutClip = (loader.content as MovieClip);
				if (rbCheat2.selected && cutClip is MovieClip || rbCheat1.selected && cutClip.getChildAt(0) is MovieClip) {				
					if (rbCheat2.selected) cutClip = (cutClip as MovieClip)
					else cutClip = (cutClip.getChildAt(0) as MovieClip);
					
					if (desWidth != -1) {
						matScaleX = desWidth / cutClip.width;
						matScaleY = desHeight / cutClip.height;
						cutClip.scaleX = desWidth / cutClip.width;
						cutClip.scaleY = desHeight / cutClip.height;
					} else {
						matScaleX = 1;
						matScaleY = 1;
					}
					
				/*	for (acs=0; acs < cutClip.currentLabels.length; acs++) {
						trace(cutClip.currentLabels[acs].name);
					}
					trace("tsugi");*/
					tiSWFWidth.text = String(clipWidth = cutClip.width);
					tiSWFHeight.text = String(clipHeight = cutClip.height);
					cutClip.stop();
					clearLoader();
					
					var duration:int = -1;
					var oldBmd:BitmapData = null;
					var oldRect:Rectangle;
					var label:String ="";
					bitmaps.length = 0;
					for (var acs:int = 1; acs <= cutClip.totalFrames; acs++) { // по кадрам мувика
						cutClip.gotoAndStop(acs);
						if (label == "") label = cutClip.currentFrameLabel;
					
						if (cutClip.width == 0 || cutClip.height == 0) continue; // пустые кадры пропускаем
					
						var bmd:BitmapData = new BitmapData(cutClip.width, cutClip.height, true, 0);// картинка кадра
						var rect:Rectangle = cutClip.getBounds(cutClip);
												
						var mat:Matrix = new Matrix();
						mat.translate(-rect.x, -rect.y);
						mat.scale(matScaleX, matScaleY);
						bmd.draw(cutClip, mat); //двигаем в 0 и масштабируем картинку
						if (!oldBmd || bmd.compare(oldBmd) == 0) { // картинка такая же, как предыдущая
							duration++;
						} else {
							var bitmap:Bitmap = new Bitmap(oldBmd);
							
							var r:Rectangle = bitmap.bitmapData.getColorBoundsRect(0xFFFFFF00, 0x00000000, false);
							if (r.width != bitmap.width || r.height != bitmap.height) {
								if (r.width == 0)
									r.width = bitmap.bitmapData.width;
								if (r.height == 0)
									r.height = bitmap.bitmapData.height;
								var bmdata:BitmapData = new BitmapData(r.width, r.height, true, 0x000000);
								bmdata.copyPixels(bitmap.bitmapData, r, new Point(0,0));
								bitmap = new Bitmap(bmdata);
							}
							bitmaps.push(bitmap);
							
							//trace(acs, 'r', r.x, r.y, '-- oldRect --', oldRect.x * matScaleX, oldRect.y * matScaleY);
							
							framesData.push({duration:duration, posX:oldRect.x * matScaleX + r.x, posY:oldRect.y * matScaleY + r.y, label:label});
							label = cutClip.currentFrameLabel;
							//trace(122, label);
							duration = 0;
						}
						oldBmd = bmd;
						oldRect = rect;
					}
					bitmap = new Bitmap(oldBmd);
										
					r = bitmap.bitmapData.getColorBoundsRect(0xFFFFFF00, 0x00000000, false);
					if (r.width != bitmap.width || r.height != bitmap.height) {
						if (r.width == 0)
							r.width = bitmap.bitmapData.width;
						if (r.height == 0)
							r.height = bitmap.bitmapData.height;
						bmdata = new BitmapData(r.width, r.height, true, 0x000000);
						bmdata.copyPixels(bitmap.bitmapData, r, new Point(0,0));
						bitmap = new Bitmap(bmdata);
					}
					bitmaps.push(bitmap);
				
					//bitmaps.push(new Bitmap(oldBmd));
					
					trace('bitmaps');
					if (cutClip.totalFrames == 1) duration++;
					//framesData.push({duration:duration, posX:rect.x, posY:rect.y, label:cutClip.currentLabel});
					framesData.push({duration:duration, posX:oldRect.x * matScaleX + r.x, posY:oldRect.y * matScaleY + r.y, label:label});
				} else {
					Alert.show('Это поебень какая-то', 'Ошибка');
					return;
				}
				
				var ind:uint = 0;
				while (ind < bitmaps.length) {
					for each (var size:int in sizes) { // подбираем размер png на выходе
						
						var maxHeight:int = 0;
						var flag:Boolean = true;
						var nextX:int = 0;
						var nextY:int = 0;
						for (var i:uint = ind; i<bitmaps.length; i++) { // по картинкам
							var bmp:Bitmap = bitmaps[i];
							bmp.x = bmp.y = 0; // сбрасываем прошлую позицию
							
							if (bmp.width + nextX > size) {
								nextX = 0;
								nextY += maxHeight + 2;
							}
							if (bmp.height + nextY > size) {
								trace('не влезло', size);
								flag = false;
								break;
							}
							bmp.x += nextX;
							bmp.y += nextY;
							nextX += bmp.width + 2;
							if (bmp.height > maxHeight) {
								maxHeight = bmp.height;
							}
						}
						if (flag) { // вписались в размер
							break;
						}
					}
					
					// формируем BitmapData для очередной png
					var bdata:BitmapData = new BitmapData(size,size,true,0);
					
					for (var j:uint=ind; j<i; j++) {
						bmp = bitmaps[j];
						mat = new Matrix();
						mat.translate(bmp.x, bmp.y);
						bdata.draw(bmp,mat);
						framesData[j].textureID = bdatas.length;
					}
					bdatas.push(bdata);
					
					ind = i;
				}
			
				/*mainBitmapData = new BitmapData(size,size,true,0);
				trace('Size', size);
				for each(bmp in bitmaps) {
					mat = new Matrix();
					mat.translate(bmp.x, bmp.y);
					mainBitmapData.draw(bmp,mat);
				}*/
				trace('число png=', bdatas.length);
				almostPng = new Bitmap(bdatas[0], "auto", true);
				canva.rawChildren.addChild(almostPng); 
				
				status = 'загрузка завершена';
			}
			
			private function cutImage(bitmap:Bitmap):Rectangle {
				
				var r:Rectangle = bitmap.bitmapData.getColorBoundsRect(0xFFFFFF00, 0x00000000, false);
				if (r.width != bitmap.width || r.height != bitmap.height) {
					var bmdata:BitmapData = new BitmapData(r.width, r.height, true, 0x000000);
					bmdata.copyPixels(bitmap.bitmapData, r, new Point(0,0));
				}
				/*var bd:BitmapData = bitmap.bitmapData;
				if (bd && bd.width > 0 && bd.height > 0) {
					var left:uint = bd.width;
					var right:uint;
					var top:int = bd.height;
					var bottom:uint;
					var maxAlpha:uint = 0;
					for (var j:int = bd.height - 1; j >= 0; j--) {
						for (var i:int = bd.width - 1; i >= 0; i--) {
							var alpha:uint = (bd.getPixel32(i, j) >> 24) & 0xFF; 
							if (alpha > maxAlpha) {
								//trace(alpha, i, j);
								if (i < left) {
									left = i;
								}
								if (i > right) {
									right = i;
								}
								if (j < top) {
									top = j;
								}
								if (j > bottom) {
									bottom = j; 
								}
							}
						}
					}
					
					if (left < right && top < bottom && (left != 0 || right != bitmap.width - 1 || top != 0 || bottom != bitmap.height - 1)) {
						var bmdata:BitmapData = new BitmapData(right - left, bottom - top, true, 0);
						bmdata.copyPixels(bd, new Rectangle(left, top, bmdata.width, bmdata.height), new Point());
					}
				}*/
				bitmap = new Bitmap(bmdata);
				return r;
			}
			
			public function xmlCreate():void {
				fs.open(new File(mainPartPath + '.xml'), FileMode.WRITE);
				fs.writeUTFBytes('<MovieClip>\n');
				fs.writeUTFBytes('\t<Textures>\n');
				
				for (var i:uint=0; i<bdatas.length; i++) {
					fs.writeUTFBytes('\t\t<Texture path="' + mainPartPath +'_' + i + '.png"/>\n');
				}
				//fs.writeUTFBytes('\t\t<Texture path="' + mainPartPath.substring(mainPartPath.lastIndexOf('\\') + 1) + '.png"/>\n');
				fs.writeUTFBytes('\t</Textures>\n');
				fs.writeUTFBytes('\t<Frames>\n');
				for (var acs:int = 0; acs < bitmaps.length; acs++) {
					var s:String = '\t\t<Frame textureID="' + framesData[acs].textureID + '" x="' + bitmaps[acs].x + '" y="' + bitmaps[acs].y
					  + '" width="' + bitmaps[acs].width + '" height="' + bitmaps[acs].height + '" posX="'
					  + framesData[acs].posX + '" posY="' + framesData[acs].posY + '"'; 
					
					if (framesData[acs].duration > 0) {
						s += ' duration="' + framesData[acs].duration + '"';
					}
					if (framesData[acs].label != null) {
						s += ' label="' + framesData[acs].label +'"';
					}
					s += '/>';
					fs.writeUTFBytes(s + '\n');
				}
				fs.writeUTFBytes('\t</Frames>\n');
				fs.writeUTFBytes('</MovieClip>\n');
				fs.close();
			}
			
			private function changeSetNameOption(event:Event = null):void {
				//tiFileName.visible = rbChangeName.selected;				
			}
			
		/*	private function changeResolution(event:Event = null):void {
				tiWidth.visible = tiHeight.visible = resYouLike.selected;
				if (resDefault.selected) { 
					desWidth = desHeight = -1
				} else if (res320.selected) {
					desWidth = 320;
					desHeight = 480; 
				} else if (res640.selected) {
					desWidth = 640;
					desHeight = 960;
				} else if (res1024.selected) {
					desWidth = 1024;
					desHeight = 768;
				} else {
					desWidth = int(tiWidth.text);
					desHeight = int(tiHeight.text);
				}
			}*/
			
		/*	private function setSizes(event:KeyboardEvent):void {
				if (event.keyCode == Keyboard.ENTER) {
					desWidth = int(tiWidth.text);
					desHeight = int(tiHeight.text);
				}
			}*/
			
			private function setBackground(event:KeyboardEvent):void {
				if (event.keyCode == Keyboard.ENTER) {
					focusManager.setFocus(focusManager.getNextFocusManagerComponent());
				}
				event.stopImmediatePropagation();
			}
			
			private function onIOError(event:IOErrorEvent):void {
				trace(event);
				clearLoader();
			}
			
			public function clearLoader():void {
				loader.unload();
				loader.contentLoaderInfo.removeEventListener(Event.COMPLETE, onLoadComplete);
				loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, onIOError);
			}
			
			public function reloadSWF(event:KeyboardEvent):void {
				if (event.keyCode == Keyboard.ENTER) {
					if (tiSWFWidth.text == '' || tiSWFWidth.text == '0' || tiSWFHeight.text == '' || tiSWFHeight.text == '0') {
						Alert.show('Долбаеб что ли?', 'Ошибка');
						return;
					}
					desWidth = int(tiSWFWidth.text);
					desHeight = int(tiSWFHeight.text);
					if (isLink) {
						if (event.currentTarget == tiSWFWidth) {
							desHeight *= desWidth / clipWidth;
							tiSWFHeight.text = String(desHeight);
						 } else if (event.currentTarget == tiSWFHeight) {
							 desWidth *= desHeight / clipHeight;
							 tiSWFWidth.text = String(desWidth);
						 }
					}
					reload(true);
				}
				event.stopImmediatePropagation();
			}
			
			public function reload(withoutSelect:Boolean = false):void {
		
				if (almostPng) {
					canva.rawChildren.removeChild(almostPng);
					almostPng = null;
					//mainBitmapData.dispose();
					bdatas.length = 0;
					for each (var bmps:Bitmap in bitmaps) {
						if (bmps.bitmapData != null)
							bmps.bitmapData.dispose();
						bmps = null;
					}
					bitmaps.splice(0,bitmaps.length);
					framesData.splice(0,framesData.length);
				}
				f.addEventListener(Event.SELECT, onSelect);
				if (!withoutSelect)
					f.browseForOpen('Выберите swf', [new FileFilter('SWF-файлы', "*.swf")]);
				else
					onSelect();
			}
			
			// вызов диалога сохранения файла
			protected function btSave_clickHandler(event:MouseEvent):void
			{
				if (f.nativePath.indexOf('.swf') != -1)
					mainPartPath = f.nativePath.substring(0, f.nativePath.indexOf('.swf'))
				else
					mainPartPath = f.nativePath;
				
				var file:File = new File(mainPartPath);
				file.addEventListener(Event.SELECT, onSavePng);
				//file.browseForSave('Выберите папку для сохранения');
				file.browseForDirectory('Выберите папку для сохранения');
			}
			
			// сохранение
			private function onSavePng(event:Event):void {
				
				
			/*	if (rbChangeName.selected) mainPartPath = mainPartPath.substring(0,mainPartPath.lastIndexOf('\\')) + '\\' + tiFileName.text;
				trace(mainPartPath);
				f = new File(mainPartPath);
				f.createDirectory();
				mainPartPath += '\\' + mainPartPath.substring(mainPartPath.lastIndexOf('\\') + 1);
				trace(mainPartPath);
				fs.open(new File(mainPartPath + '.png'), FileMode.WRITE);*/
					
				status = 'сохранение...';
				
				var file:File = event.target as File;
				if (!file.exists)
					file.createDirectory();
				
				mainPartPath = file.url;
				mainPartPath += '/' + file.url.substring(mainPartPath.lastIndexOf('/')+1);
				
				for (var i:uint=0; i<bdatas.length; i++) {
					var imgByteArray:ByteArray = png.encode(bdatas[i]);
					fs.open(new File(mainPartPath +'_'+ i +'.png'), FileMode.WRITE);
					fs.writeBytes(imgByteArray);
					fs.close();
				}
				
				xmlCreate();
				
				status = 'сохранено';
			}

		]]>
	</fx:Script>
	<s:VGroup height="100%" y="10" x="10" width="100%">
		<s:HGroup width="538" height="55">
			<s:VGroup>
				<s:RadioButton id="rbCheat1" label="Вложенный клип" groupName="cheatRG" selected="false"/>
				<s:RadioButton id="rbCheat2" label="Не вложенный" groupName="cheatRG" selected="true"/>
			</s:VGroup>
			<s:Button id="btLoadSWF" label="Загрузить swf" click="reload()"/>
			<s:Button label="Сохранить png" click="btSave_clickHandler(event)" id="btSave"/>
		</s:HGroup>
		<mx:HRule strokeWidth="2" width="100%" strokeColor="0x000000"/>
		<mx:Canvas id="canva" width="100%" height="100%"/>
		<mx:HRule strokeWidth="2" width="100%" height="2" strokeColor="0x000000"/>
		<s:VGroup width="100%" height="117">
			<s:Label text="Размеры SWF:"/>
			<s:HGroup height="75">
				<s:VGroup>
					<s:TextInput id="tiSWFWidth" text="" keyDown="reloadSWF(event)" widthInChars="3" restrict="0-9"/>
					<s:TextInput id="tiSWFHeight" text="" keyDown="reloadSWF(event)" widthInChars="3" restrict="0-9"/>
				</s:VGroup>
				<s:VGroup paddingTop="15">
					<s:CheckBox id="chbLink" click="isLink = !isLink" label="Сохранить пропорции" selected="true"/>
				</s:VGroup>
			</s:HGroup>
		</s:VGroup>
	</s:VGroup>		
	
</s:WindowedApplication>