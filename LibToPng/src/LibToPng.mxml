<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" width="538" height="400"
					   applicationComplete="init()">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import com.maccherone.json.JSON;
			
			import flash.utils.getDefinitionByName;
			
			import mx.controls.Alert;
			import mx.graphics.codec.PNGEncoder;
			
			private var loader:Loader = new Loader();
			private var li:LoaderInfo;
			private var settings:Object = new Object();
			private var settPath:String;
			private var png:PNGEncoder = new PNGEncoder();
			
			private function init():void {
				title = 'LibToPng';
				addEventListener(Event.CLOSING, onClosing);
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onLoadComplete);
				
				settPath = File.applicationStorageDirectory.nativePath + '/settings.json';
				var f:File = new File(settPath);
				if (f.exists) {
					settings = getJSON(settPath);
				}
				if (settings.exportPath != null) {
					tiExportDir.text = settings.exportPath;
				}
				
			/*	var mc:MovieClip = new MovieClip();
				mc.alpha = 0.5;
				
				var sp:Sprite = new Sprite();
			//	sp.alpha = 1;
				mc.addChild(sp);
				
				var sp1:Sprite = new Sprite();
				//mc.addChild(sp1);
				
				trace(mc.alpha, sp.alpha); */
			}
			
			private function findMask(content:DisplayObject):void {
				trace(content.name, content.width, content.height);
				
				if (content.mask != null) {
					Alert.show('has mask')
				}
				if (!(content is DisplayObjectContainer)) {
					return;
				}
				if (content is MovieClip) {
					var clip:MovieClip = content as MovieClip;
					for (var i:uint = 0; i<clip.totalFrames; i++) {
						clip.gotoAndStop(i);
						for (var j:uint = 0; j<clip.numChildren; j++) {
							findMask(clip.getChildAt(j));
						}
					}
				} else
				if (content is Sprite) {
					var sp:Sprite = content as Sprite;
					for (j = 0; j<sp.numChildren; j++) {
						findMask(sp.getChildAt(j));
					}
				} else {
					Alert.show('левый объект');
				}
			}
			
			// закрытие приложения. сохраняем настройки
			private function onClosing(event:Event):void {
				
				if (tiExportDir.text != '') {
					settings.exportPath = tiExportDir.text;
				}
				
				var fs:FileStream = new FileStream(); 
				fs.open(new File(settPath), FileMode.WRITE);
				fs.writeUTFBytes(JSON.encode(settings,true));
				fs.close();
			}
			
			// получение данных из json-файла
			private function getJSON(url:String):Object {
				var fs:FileStream = new FileStream();
				fs.open(new File(url), FileMode.READ);
				var str:String = fs.readUTFBytes(fs.bytesAvailable);
				fs.close();
				
				var obj:Object;
				try {
					obj = JSON.decode(str);
					if (obj is String) {
						Alert.show('Не разобрался JSON: ' + url, 'Ошибка');
						obj = null;
					}
				} catch (error:Error) {
					Alert.show('Не разобрался JSON: ' + url, 'Ошибка');
				}
				
				return obj;
			}
			
			
			// сделать экспорт
			protected function button1_clickHandler(event:MouseEvent):void
			{
				if (tiClassName.text == '') {
					Alert.show('Введите имя класса', 'Ошибка');
					return;
				}
				if (tiExportDir.text == '') {
					Alert.show('Выберите папку экспорта', 'Ошибка');
					return;
				}
				
				try {
					var cls:Class = li.applicationDomain.getDefinition(tiClassName.text) as Class;
				}catch(error:Error){
					Alert.show('Нет такого класса', 'Ошибка');
					return;
				}
				
				var content:DisplayObject = new cls();
				
			/*	var mc:MovieClip = new MovieClip();
				mc.graphics.beginFill(0x00FF00, 1);
				mc.graphics.drawRect(100,100,60,60);
				mc.graphics.endFill();
				
				var mc2:MovieClip = new MovieClip();
				var sp:Sprite = new Sprite();
				sp.graphics.beginFill(0xFF0000, 0.3);
				sp.graphics.drawRect(100,100,50,50);
				sp.graphics.endFill();
				mc2.addChild(sp);
				mc.mask = mc2;
				
				findMask(content);*/
				
				//test(content as MovieClip);
				//return;
				
				addEventListener(Event.ENTER_FRAME, onEnterFrame);
				
				try {
					parse(content, tiExportDir.text, tiClassName.text);
				}catch(error:Error) {
					Alert.show('Какая-то бага', 'Ошибка');
				} 
				
				status = "готово"; 
			}
			
			private function onEnterFrame(event:Event):void {
				
			}
			
			private function test(clip:MovieClip):void {
				for (var i:uint = 1; i<=clip.totalFrames; i++) {
					clip.gotoAndStop(i);
					var child:MovieClip = clip.getChildAt(0) as MovieClip; 
					
					//child.alpha = 1;
						
					trace(child.filters[0]);
					
				/*	var rect:Rectangle = child.getBounds(child);
					var bmd:BitmapData = new BitmapData(Math.ceil(child.width), Math.ceil(child.height), true, 0);
					
					var mat:Matrix = new Matrix();
					mat.translate(-rect.x, -rect.y);
					bmd.draw(child, mat);
					
					var bmp:Bitmap = new Bitmap(bmd);
					bmp.x = i*60;
					canva.rawChildren.addChild(bmp); */
				}
			}
		
			
			private function parse(content:DisplayObject, path:String, cap:String):Object {
			
				//if (content.filters.length > 0 )
				//	trace('parse', content, content.filters[0], content.name, content.filters.length, path + cap);
				trace('parse', content);
				
				if (content is MovieClip) {
					return parseMC(content, path, cap);
				} else
					
				if (content is Sprite){
					return parseSprite(content, path, cap);
				} else {
					
				if (content is Shape) {
					return parseShape(content, path, cap);
					
				} else
					Alert.show('Объект не является MovieClip, Sprite или Shape: '+content +'\n'+ path +'/'+ cap, 'Ошибка');
					return null;
				}
				//return {type:(content is MovieClip) ? "clip" : "sprite", dir:cap, x:content.x, y:content.y, name:content.name};
			}
			
			//========= сохранение Shape =============
			private function parseShape(content:DisplayObject, path:String, cap:String):Object {
				//trace('parseShape', content.name);
				
				var p:Object = writePng(content, path+'/'+cap+'.png');
				return {type:"image", file:cap+'.png', x:content.x + p.x, y:content.y + p.y, name:content.name};
			}
			
			//========= разбор MovieClip ==============
			private function parseMC(content:DisplayObject, path:String, cap:String):Object {
				//trace('parseMC', content.name);
				
				var clip:MovieClip = content as MovieClip;
				if (clip.totalFrames == 1){
					return parseSprite(content, path, cap);
				} 
		
				path += '/'+cap;
				var frames:Array = [];
				var meta:Object = {type: "clip", frames:frames};
				
												
				for (var i:uint = 1; i<=clip.totalFrames; i++) { // по кадрам
												
					clip.gotoAndStop(i);	
					
				/*	var rect:Rectangle = clip.getBounds(clip);
					var mat:Matrix = new Matrix();
					mat.translate(-rect.x, -rect.y);
					var bm:BitmapData = new BitmapData(50,50);//(clip.width, clip.height, true, 0x000000);
					bm.draw(clip,mat);
					
					var bmp:Bitmap = new Bitmap(bm);
					bmp.x = i*60;
					canva.rawChildren.addChild(bmp); */
																			
					if (clip.numChildren > 0) { // кадр не пустой, создаем элемент в массиве кадров
						var children:Array = [];
						var data:Object = {children: children};
						if (clip.currentLabel != null) {
							data.label = clip.currentLabel;
						}
						frames.push(data);
					}
					
					for (var j:uint = 0; j<clip.numChildren; j++) { // по потомкам кадра
												
						var child:DisplayObject = clip.getChildAt(j);
						//child.alpha *= clip.alpha;
						
					//	trace(clip.currentFrame, child.alpha, clip.alpha, child.name, child.filters[0]);
						children.push(parse(child, path, i+'_'+j));
					}
					
					
				}
				
				//canva.rawChildren.addChild(clip);
				
				saveMeta(meta, path);
				return {type:"clip", dir:cap, x:content.x, y:content.y, name:content.name};
			}
			
			//====== разбор спрайта ==============
			private function parseSprite(content:DisplayObject, path:String, cap:String):Object {
				//trace('parseSprite', content.name);				
				
				
				var container:Sprite = content as Sprite;
								
				if (container.numChildren == 0) {
					
					if (container.width > 0 && container.height > 0) {
						trace('container.numChildren == 0', container.width, container.height);
					}
					return {type:"sprite", dir:cap, x:content.x, y:content.y, name:content.name};
				}
				if (container.numChildren == 1) {
					var child:DisplayObject = container.getChildAt(0);
					child.alpha *= container.alpha;
					child.filters = container.filters;
					
					return parse(child, path, cap);
				}
				path += '/'+cap;
				var children:Array = [];
				var meta:Object = {type: "sprite", children: children};
				
				//trace("sprite ", path, content.name);
				
				for (var i:uint = 0; i<container.numChildren; i++) { // по потомкам
					child = container.getChildAt(i);	
					child.alpha *= content.alpha;
					children.push(parse(child, path, String(i)));
				}
				saveMeta(meta, path);
				return {type:"sprite", dir:cap, x:content.x, y:content.y, name:content.name};
			}
			
			//====== сохранение метафайла ========
			private function saveMeta(data:Object, path:String):void {
				
				var fs:FileStream = new FileStream();
				fs.open(new File(path+'/meta.json'), FileMode.WRITE);
				fs.writeUTFBytes(JSON.encode(data, true));
				fs.close();
			}
			
			//======= создание png ===============
			private function writePng(source:DisplayObject, url:String):Object {
				//trace('writePng', url, source.width, source.height);
				
				var m:Matrix = new Matrix();
				m.translate(50,50);
								
				var bd:BitmapData = new BitmapData(source.width + 100, source.height + 100, true, 0x000000);
				bd.draw(source, m, new ColorTransform(1,1,1, source.alpha));
							
				var r:Rectangle = bd.getColorBoundsRect(0xFFFFFF00, 0x00000000, false);
				
				//trace('rect', r.x, r.y, source.x, source.y, r.width, r.height, source.width, source.height);
				
				if (r.width == 0)
					r.width = bd.width - 100;
				if (r.height == 0)
					r.height = bd.height - 100;
				
				var bmdata:BitmapData = new BitmapData(r.width, r.height, true, 0x000000);
				bmdata.copyPixels(bd, r, new Point(0,0));
				
				var ba:ByteArray = png.encode(bmdata); 
				
			/*	var r:Rectangle = new Rectangle(50, 50);
				var bd:BitmapData = new BitmapData(source.width, source.height, true, 0x000000);
				bd.draw(source, null, new ColorTransform(1,1,1, source.alpha));
				var ba:ByteArray = png.encode(bd); */
				
				var fs:FileStream = new FileStream();
				fs.open(new File(url), FileMode.WRITE);
				fs.writeBytes(ba);
				fs.close();
				
				return {x: r.x - 50, y:r.y - 50};
			}
			
			//========= выбор swf ============
			protected function btSelectSwf_clickHandler(event:MouseEvent):void
			{
				var f:File = new File();
				f.addEventListener(Event.SELECT, onSelectSwf);
				f.browseForOpen('Выберите swf', [new FileFilter('SWF-файлы', "*.swf")]);
			}
			
			//========= выбрана swf =========
			private function onSelectSwf(event:Event):void {
				status = 'загрузка...';
				var f:File = event.currentTarget as File;
				f.removeEventListener(Event.SELECT, onSelectSwf);
				
				loader.load(new URLRequest(f.url));
				tiSwfName.text = f.url;
			}
			
			// выбор папки экспорта
			private function btSelectDir_clickHandler(event:MouseEvent):void {
				var f:File = new File();
				f.addEventListener(Event.SELECT, onSelectDir);
				f.browseForDirectory('Выберите папку');
			}
			
			// выбрана папка экспорта
			private function onSelectDir(event:Event):void {
				var f:File = event.currentTarget as File;
				f.removeEventListener(Event.SELECT, onSelectDir);
				tiExportDir.text = f.url;
			}
			
			
			// swf загружена
			private function onLoadComplete(event:Event):void {
				status = "загрузка завершена";
				btExport.enabled = true;
				li = event.target as LoaderInfo;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Разместить невизуальные элементы (например, службы или объекты значений) -->
	</fx:Declarations>
	<s:VGroup x="0" y="50" width="100%" height="327" paddingLeft="50" paddingRight="50">
		<s:Label text="SWF"/>
		<s:HGroup width="100%">
			<s:TextInput width="100%" id="tiSwfName"/>
			<s:Button label="..." width="30" id="btSelectSwf" click="btSelectSwf_clickHandler(event)"/>
		</s:HGroup>
		<s:Label text="Имя класса"/>
		<s:TextInput id="tiClassName" width="326"/>
		<s:Label text="Папка экспорта"/>
		<s:HGroup width="100%">
			<s:TextInput width="100%" id="tiExportDir"/>
			<s:Button label="..." width="30" id="btSelectDir" click="btSelectDir_clickHandler(event)"/>
		</s:HGroup>
		<s:Button label="Экспорт" click="button1_clickHandler(event)" enabled="false" id="btExport"/>
		
		<mx:Canvas id="canva" width="100%" height="100%"/>
	</s:VGroup>
</s:WindowedApplication>
