<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" width="538" height="400"
					   applicationComplete="init()">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import com.maccherone.json.JSON;
			
			import flash.utils.getDefinitionByName;
			
			import mx.controls.Alert;
			import mx.graphics.codec.PNGEncoder;
			
			private var loader:Loader = new Loader();
			private var li:LoaderInfo;
			private var settings:Object = new Object();
			private var settPath:String;
			private var png:PNGEncoder = new PNGEncoder();
			
			private function init():void {
				title = 'LibToPng';
				addEventListener(Event.CLOSING, onClosing);
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onLoadComplete);
				
				settPath = File.applicationStorageDirectory.nativePath + '/settings.json';
				var f:File = new File(settPath);
				if (f.exists) {
					settings = getJSON(settPath);
				}
				if (settings.exportPath != null) {
					tiExportDir.text = settings.exportPath;
				}
				
			/*	var mc:MovieClip = new MovieClip();
				var sp:Sprite = new Sprite();
				mc.addChild(sp);
				
				var sp1:Sprite = new Sprite();
				mc.addChild(sp1);
				
				trace(mc.totalFrames, mc.numChildren); */
			}
			
			// закрытие приложения. сохраняем настройки
			private function onClosing(event:Event):void {
				
				if (tiExportDir.text != '') {
					settings.exportPath = tiExportDir.text;
				}
				
				var fs:FileStream = new FileStream(); 
				fs.open(new File(settPath), FileMode.WRITE);
				fs.writeUTFBytes(JSON.encode(settings,true));
				fs.close();
			}
			
			// получение данных из json-файла
			private function getJSON(url:String):Object {
				var fs:FileStream = new FileStream();
				fs.open(new File(url), FileMode.READ);
				var str:String = fs.readUTFBytes(fs.bytesAvailable);
				fs.close();
				
				var obj:Object;
				try {
					obj = JSON.decode(str);
					if (obj is String) {
						Alert.show('Не разобрался JSON: ' + url, 'Ошибка');
						obj = null;
					}
				} catch (error:Error) {
					Alert.show('Не разобрался JSON: ' + url, 'Ошибка');
				}
				
				return obj;
			}
			
			
			// сделать экспорт
			protected function button1_clickHandler(event:MouseEvent):void
			{
				if (tiClassName.text == '') {
					Alert.show('Введите имя класса', 'Ошибка');
					return;
				}
				if (tiExportDir.text == '') {
					Alert.show('Выберите папку экспорта', 'Ошибка');
					return;
				}
				
				try {
					var cls:Class = li.applicationDomain.getDefinition(tiClassName.text) as Class;
				}catch(error:Error){
					Alert.show('Нет такого класса', 'Ошибка');
					return;
				}
				
				var content:DisplayObject = new cls();
				parse(content, tiExportDir.text + '/'+tiClassName.text);
				status = "готово";
			}
			
			private function parse(content:DisplayObject, path:String):void {
				var meta:Object = new Object();
				var fs:FileStream = new FileStream();
				
				if (content is MovieClip) {
					//trace("clip ", path, content.name);
					var frames:Array = [];
					var clip:MovieClip = content as MovieClip;
										
						for (var i:uint = 0; i<clip.totalFrames; i++) { // по кадрам
							//trace('frame '+i);
							clip.gotoAndStop(i);
							
							if (clip.numChildren > 0) { // кадр не пустой, создаем элемент в массиве кадров
								var children:Array = [];
								var data:Object = {children: children};
								if (clip.currentLabel != null) {
									data.label = clip.currentLabel;
								}
								frames.push(data);
							}
							
							for (var j:uint = 0; j<clip.numChildren; j++) { // по потомкам кадра
								//trace('child '+ j);
								
								child = clip.getChildAt(j);
								var cap:String = i+'_'+j;
								// только потомок может быть Shape, пишем сразу
								if (child is Shape){
									children.push({type:"image", file:cap+'.png', x:child.x, y:child.y, name:child.name});
									//trace("image", path+'/'+cap+'.png', child.name);
									
									// записываем png!!!
									writePng(child, path+'/'+cap+'.png');
									
								} else {
									children.push({type:(child is MovieClip) ? "clip" : "sprite", dir:cap, x:child.x, y:child.y, name:child.name});
									parse(child, path+'/'+ cap);
								}
							}
						}
						
						
						if (clip.totalFrames < 2){
							meta.type = "sprite";
							meta.children = (frames.length > 0) ? frames[0].children : [];
						} else {
							meta.type = "clip";
							meta.frames = frames;
						}
			
				} else
				if (content is Sprite){
					meta.type = "sprite";
					//trace("sprite ", path, content.name);
					
					var container:Sprite = content as Sprite;
					
					if (container.numChildren > 0) {
						children = [];
						meta.children = children;
					}
					for (i = 0; i<container.numChildren; i++) { // по потомкам
						var child:DisplayObject = container.getChildAt(i);
						
						// только потомок может быть Shape, пишем сразу
						if (child is Shape){
							children.push({type:"image", file:i+'.png', x:child.x, y:child.y, name:child.name});
							// записываем png!!!
							writePng(child, path+'/'+i+'.png');
						} else {
							children.push({type:(child is MovieClip) ? "clip" : "sprite", dir:String(i), x:child.x, y:child.y, name:child.name});
							parse(child, path+'/'+i);
						}
					}
					
				} else {
					Alert.show('Объект не является MovieClip, Sprite или Shape: '+content +'\n'+ path, 'Ошибка');
					return;
				}
				
				
				// сохраняем метафайл
				fs.open(new File(path+'/meta.json'), FileMode.WRITE);
				fs.writeUTFBytes(JSON.encode(meta, true));
				fs.close();
				
			}
			
			// создание png
			private function writePng(source:DisplayObject, url:String):void {
				var bd:BitmapData = new BitmapData(source.width, source.height, true, 0x000000);
				bd.draw(source);
				var ba:ByteArray = png.encode(bd);
				
				var fs:FileStream = new FileStream();
				fs.open(new File(url), FileMode.WRITE);
				fs.writeBytes(ba);
				fs.close();
			}
			
			// выбор swf
			protected function btSelectSwf_clickHandler(event:MouseEvent):void
			{
				var f:File = new File();
				f.addEventListener(Event.SELECT, onSelectSwf);
				f.browseForOpen('Выберите swf', [new FileFilter('SWF-файлы', "*.swf")]);
			}
			
			// выбрана swf
			private function onSelectSwf(event:Event):void {
				status = 'загрузка...';
				var f:File = event.currentTarget as File;
				f.removeEventListener(Event.SELECT, onSelectSwf);
				
				loader.load(new URLRequest(f.url));
				tiSwfName.text = f.url;
			}
			
			// выбор папки экспорта
			private function btSelectDir_clickHandler(event:MouseEvent):void {
				var f:File = new File();
				f.addEventListener(Event.SELECT, onSelectDir);
				f.browseForDirectory('Выберите папку');
			}
			
			// выбрана папка экспорта
			private function onSelectDir(event:Event):void {
				var f:File = event.currentTarget as File;
				f.removeEventListener(Event.SELECT, onSelectDir);
				tiExportDir.text = f.url;
			}
			
			
			// swf загружена
			private function onLoadComplete(event:Event):void {
				status = "загрузка завершена";
				btExport.enabled = true;
				li = event.target as LoaderInfo;
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Разместить невизуальные элементы (например, службы или объекты значений) -->
	</fx:Declarations>
	<s:VGroup x="0" y="50" width="100%" height="240" paddingLeft="50" paddingRight="50">
		<s:Label text="SWF"/>
		<s:HGroup width="100%">
			<s:TextInput width="100%" id="tiSwfName"/>
			<s:Button label="..." width="30" id="btSelectSwf" click="btSelectSwf_clickHandler(event)"/>
		</s:HGroup>
		<s:Label text="Имя класса"/>
		<s:TextInput id="tiClassName" width="326"/>
		<s:Label text="Папка экспорта"/>
		<s:HGroup width="100%">
			<s:TextInput width="100%" id="tiExportDir"/>
			<s:Button label="..." width="30" id="btSelectDir" click="btSelectDir_clickHandler(event)"/>
		</s:HGroup>
		<s:Button label="Экспорт" click="button1_clickHandler(event)" enabled="false" id="btExport"/>
	</s:VGroup>
</s:WindowedApplication>
