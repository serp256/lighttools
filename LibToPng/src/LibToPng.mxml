<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" width="538" height="650"
					   applicationComplete="init()">
	<s:layout>
		<s:BasicLayout/>
	</s:layout>
	
	<fx:Script>
		<![CDATA[
			import com.maccherone.json.JSON;
			
			import flash.utils.getDefinitionByName;
			
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.controls.Alert;
			import mx.graphics.codec.PNGEncoder;
			import mx.utils.ObjectProxy;
			
			import spark.events.IndexChangeEvent;
					
		//	private var loader:Loader = new Loader();
			private var settings:Object = new Object();
			private var settPath:String;
			private var png:PNGEncoder = new PNGEncoder();
			private var swfsUrl:String;
			private var classes:Array;  // списки классов swf-ок
			private var urls:Array;		// пути swf-файлов
			private var index:uint = 0;
			private var liArray:Array; // of LoaderInfo каждой swf
			private var changesInstances:Vector.<String>;
			private var childs:Array;
			private var allChilds:Array;
			private var arrMC:Array;
			private var allMC:Array;
						
			private function init():void {
				title = 'LibToPng';
				addEventListener(Event.CLOSING, onClosing);
								
				settPath = File.applicationStorageDirectory.nativePath + '/settings.json';
				var f:File = new File(settPath);
				if (f.exists) {
					settings = getJSON(settPath);
				}
				if (settings.exportPath != null) {
					tiExportDir.text = settings.exportPath;
				}
				
			/*	var mc:MovieClip = new MovieClip();
				mc.alpha = 0.5;
				
				var sp:Sprite = new Sprite();
			//	sp.alpha = 1;
				mc.addChild(sp);
				
				var sp1:Sprite = new Sprite();
				//mc.addChild(sp1);
				
				trace(mc.alpha, sp.alpha); */
			}
			
			private function isRepeatMC(newArr:Array):Boolean {
				for each (var arr:Array in allMC) {
					if (arr.length != newArr.length)
						continue;
					var cnt:uint = 0;
					for (var i:uint = 0; i<arr.length; i++) {
						if (arr[i].mc == newArr[i].mc && arr[i].frame == newArr[i].frame)
							cnt++
						else
							continue;
					}
					if (cnt == arr.length){
						return true;
					}
				}
				allMC.push(newArr);
				return false;
			}
			
			private function parseNew(content:DisplayObject, path:String):void {
				allChilds = [];
				allMC = [];
				arrMC = [];
				
				
				while (!isRepeatMC(arrMC)){ trace('===========================', allMC.length);
					childs = [];
					
					arrMC = [];
					var m:Matrix = new Matrix();
					m.identity();
					parseTree(content, m, 1);
					
					allChilds.push(childs);
				}
				
				for (var j:uint = 0; j<allChilds.length; j++) {
					childs = allChilds[j];
					var container:Sprite = new Sprite();
					for (var i:uint = 0; i<childs.length; i++) {
						var img:DisplayObject = childs[i].img;
												
						var oldMatrix:Matrix = img.transform.matrix;
						var oldAlpha:Number = img.alpha;
						img.transform.matrix = childs[i].matrix;
						img.alpha = childs[i].alpha;
						
					/*	var newMatrix:Matrix = img.transform.matrix;
						newMatrix.concat(m);
						img.transform.matrix = newMatrix;
						img.alpha *= childs[i].alpha;*/
						
						container.addChild(img);
						
						trace(j, img, img.name, img.width, img.height, img.scaleX, img.scaleY, img.rotation);
						
						//writePng(img, path+'/'+j+'_'+i+'.png'/*, m childs[i].alpha*/);
						
						img.transform.matrix = oldMatrix;
						img.alpha = oldAlpha;
					}
					writePng(container, path+'/'+j+'.png');
				}
								
				
			}
			
			private function parseTree(content:DisplayObject, matrix:Matrix, alpha:Number):void {
				
				//trace(content.name);
				
				content.mask = null;
				
				var newMatrix:Matrix = content.transform.matrix;
				newMatrix.concat(matrix);
				matrix = newMatrix;
				alpha *= content.alpha;
				
				var container:DisplayObjectContainer = content as DisplayObjectContainer;
				if (container != null) { // есть потомки
					
					var num:uint = container.numChildren;
					for (var i:uint = 0; i<num; i++) {
						var child:DisplayObject = container.getChildAt(i);
						
						//trace(child, child.name, child.width, child.height, container, container.name);
						
					/*	var newMatrix:Matrix = child.transform.matrix;
						newMatrix.concat(container.transform.matrix);
						child.transform.matrix = newMatrix;
						child.alpha *= container.alpha; */
						
						parseTree(child, matrix, alpha);
					}
					var mc:MovieClip = (container as MovieClip); 
					if (mc != null && mc.totalFrames > 1){ //trace(mc.name, mc.currentFrame);
						arrMC.push({mc:mc.name, frame:mc.currentFrame});
						mc.nextFrame();
					}
				} else { 
					childs.push({img:content, matrix:matrix, alpha:alpha});
				}
			}
			
			private function changeParent(content:DisplayObject):void {
								
				var container:DisplayObjectContainer = content as DisplayObjectContainer;
				trace(content, content.name, content.width, content.height, content.parent, content.x, content.y);
				
				if (container != null) { // есть потомки
					var j:uint = 0;
					while (j< container.numChildren) {
						var child:DisplayObject = container.getChildAt(j);
						
						var num:uint = container.numChildren;
						changeParent(child);
						
						//if (container.numChildren == num) {
						if (container.contains(child)) { //trace('jjjjjjjjjjjj', j);
							j++;
						}
					}
				} else { // поднимаем на уровень выше
					var par:DisplayObjectContainer = content.parent;
					if (par == null) return;
									
					var prev_par:DisplayObjectContainer = par.parent;
					if (prev_par == null) return;
					
					var newMatrix:Matrix=content.transform.matrix;
					newMatrix.concat(par.transform.matrix);
					content.transform.matrix = newMatrix;
					content.alpha *= par.alpha;
					
					var index:uint = prev_par.getChildIndex(par) + par.getChildIndex(content);
					//prev_par.addChildAt(content, (content.width == 4) ? prev_par.numChildren-1 : 0);
					prev_par.addChildAt(content, index);
					
					trace(content, prev_par, (content.width == 4) ? prev_par.numChildren-1 : 0, content.x, content.y);
					
					// предок остался без потомков - удаляем его
				//	if (/*par.name.indexOf('instance') > -1 &&*/ par.numChildren == 0) { trace('remove');
				//		prev_par.removeChild(par);
				//		par = null;
				//	}
				}
			}
						
			private function findMask(content:DisplayObject):void {
				trace(content.name, content.width, content.height, content.mask);
				
				if (content.mask != null) {
					Alert.show('has mask')
				}
				if (!(content is DisplayObjectContainer)) {
					return;
				}
				if (content is MovieClip) {
					var clip:MovieClip = content as MovieClip;
					for (var i:uint = 0; i<clip.totalFrames; i++) {
						clip.gotoAndStop(i);
						for (var j:uint = 0; j<clip.numChildren; j++) {
							findMask(clip.getChildAt(j));
						}
					}
				} else
				if (content is Sprite) {
					var sp:Sprite = content as Sprite;
					for (j = 0; j<sp.numChildren; j++) {
						findMask(sp.getChildAt(j));
					}
				} else {
					Alert.show('левый объект');
				}
			}
			
			// закрытие приложения. сохраняем настройки
			private function onClosing(event:Event):void {
				
				if (tiExportDir.text != '') {
					settings.exportPath = tiExportDir.text;
				}
				
				var fs:FileStream = new FileStream(); 
				fs.open(new File(settPath), FileMode.WRITE);
				fs.writeUTFBytes(JSON.encode(settings,true));
				fs.close();
			}
			
			// получение данных из json-файла
			private function getJSON(url:String):Object {
				var fs:FileStream = new FileStream();
				fs.open(new File(url), FileMode.READ);
				var str:String = fs.readUTFBytes(fs.bytesAvailable);
				fs.close();
				
				var obj:Object;
				try {
					obj = JSON.decode(str);
					if (obj is String) {
						Alert.show('Не разобрался JSON: ' + url, 'Ошибка');
						obj = null;
					}
				} catch (error:Error) {
					Alert.show('Не разобрался JSON: ' + url, 'Ошибка');
				}
				
				return obj;
			}
			
			
			// сделать экспорт
			protected function button1_clickHandler(event:MouseEvent):void
			{
				if (tiExportDir.text == '') {
					Alert.show('Выберите папку экспорта', 'Ошибка');
					return;
				}
				
				for (var swfName:String in liArray) { // по swf-кам
					var li:LoaderInfo = liArray[swfName];
					var arr:Array = classes[swfName] 
					for each (var obj:ObjectProxy in arr) { // по классам swf-ки
						if (!obj.isSelect) continue;
						var clsName:String = obj.swfName;
						var Cls:Class = li.applicationDomain.getDefinition(clsName) as Class;
						var content:DisplayObject = new Cls();
						//try {
							//parse(content, tiExportDir.text+'/'+swfName.substr(0,swfName.indexOf('.swf')), clsName);
							
						//	changeParent(content);
						parseNew(content, tiExportDir.text+'/'+swfName.substr(0,swfName.indexOf('.swf'))+'/'+ clsName);
							//writePng(, tiExportDir.text+'/'+swfName.substr(0,swfName.indexOf('.swf'))+'/'+ clsName+'.png');
						//}catch(error:Error) {
						//	Alert.show('Какая-то бага при парсинге\n'+swfName+' - '+clsName, 'Ошибка');
						//} 
					}
				}
				
			
			/*	
				var mc:MovieClip = new MovieClip();
				mc.graphics.beginFill(0x00FF00, 1);
				mc.graphics.drawRect(100,100,60,60);
				mc.graphics.endFill();
				
				var mc2:MovieClip = new MovieClip();
				var sp:Sprite = new Sprite();
				sp.graphics.beginFill(0xFF0000, 0.3);
				sp.graphics.drawRect(100,100,50,50);
				sp.graphics.endFill();
				mc2.addChild(sp);
				mc.mask = mc2;*/
				
				//findMask(content);
				
				
				
				
				status = "готово"; 
			}
			
			
			private function test(clip:MovieClip):void {
				for (var i:uint = 1; i<=clip.totalFrames; i++) {
					clip.gotoAndStop(i);
					var child:MovieClip = clip.getChildAt(0) as MovieClip; 
					
					//child.alpha = 1;
						
					
					
				/*	var rect:Rectangle = child.getBounds(child);
					var bmd:BitmapData = new BitmapData(Math.ceil(child.width), Math.ceil(child.height), true, 0);
					
					var mat:Matrix = new Matrix();
					mat.translate(-rect.x, -rect.y);
					bmd.draw(child, mat);
					
					var bmp:Bitmap = new Bitmap(bmd);
					bmp.x = i*60;
					canva.rawChildren.addChild(bmp); */
				}
			}
		
			
			private function parse(content:DisplayObject, path:String, cap:String):Object {
			
				//if (content.filters.length > 0 )
				//	trace('parse', content, content.filters[0], content.name, content.filters.length, path + cap);
				//trace('parse', content);
				
				if (content is MovieClip) {
					return parseMC(content, path, cap);
				} else
					
				if (content is Sprite){
					return parseSprite(content, path, cap);
				} else {
					
				if (content is Shape) {
					return parseShape(content, path, cap);
					
				} else
					Alert.show('Объект не является MovieClip, Sprite или Shape: '+content +'\n'+ path +'/'+ cap, 'Ошибка');
					return null;
				}
				//return {type:(content is MovieClip) ? "clip" : "sprite", dir:cap, x:content.x, y:content.y, name:content.name};
			}
			
			//========= сохранение Shape =============
			private function parseShape(content:DisplayObject, path:String, cap:String):Object {
				//trace('parseShape', content.name);
				
				var p:Object = writePng(content, path+'/'+cap+'.png');
				return {type:"image", file:cap+'.png', x:content.x + p.x, y:content.y + p.y, name:content.name};
			}
			
			//========= разбор MovieClip ==============
			private function parseMC(content:DisplayObject, path:String, cap:String):Object {
				//trace('parseMC', content.name);
				
				var clip:MovieClip = content as MovieClip;
				if (clip.totalFrames == 1){
					return parseSprite(content, path, cap);
				} 
		
				path += '/'+cap;
				var frames:Array = [];
				var meta:Object = {type: "clip", frames:frames};
				
												
				for (var i:uint = 1; i<=clip.totalFrames; i++) { // по кадрам
												
					clip.gotoAndStop(i);	
					
				/*	var rect:Rectangle = clip.getBounds(clip);
					var mat:Matrix = new Matrix();
					mat.translate(-rect.x, -rect.y);
					var bm:BitmapData = new BitmapData(50,50);//(clip.width, clip.height, true, 0x000000);
					bm.draw(clip,mat);
					
					var bmp:Bitmap = new Bitmap(bm);
					bmp.x = i*60;
					canva.rawChildren.addChild(bmp); */
																			
					if (clip.numChildren > 0) { // кадр не пустой, создаем элемент в массиве кадров
						var children:Array = [];
						var data:Object = {children: children};
						if (clip.currentLabel != null) {
							data.label = clip.currentLabel;
						}
						frames.push(data);
					}
					
					for (var j:uint = 0; j<clip.numChildren; j++) { // по потомкам кадра
												
						var child:DisplayObject = clip.getChildAt(j);
						//child.alpha *= clip.alpha;
					//	trace(clip.currentFrame, child.alpha, clip.alpha, child.name, child.filters[0]);
						children.push(parse(child, path, i+'_'+j));
					}
					
					
				}
				
				//canva.rawChildren.addChild(clip);
				
				saveMeta(meta, path);
				return {type:"clip", dir:cap, x:content.x, y:content.y, name:content.name};
			}
			
			//====== разбор спрайта ==============
			private function parseSprite(content:DisplayObject, path:String, cap:String):Object {
				//trace('parseSprite', content.name);				
				//if (content.name == "value_box") {
				//	trace(123);
				//}
				
				
				var container:Sprite = content as Sprite;
				//trace(container.name, container.name.indexOf('instance'));
						
				if (container.numChildren == 1 && (container.name.indexOf('instance') == 0)) {
					var child:DisplayObject = container.getChildAt(0);
			
					if (changesInstances.indexOf(child.name) == -1) {
						child.alpha *= container.alpha;
						child.filters = container.filters;
						child.x += container.x;
						child.y += container.y;
						child.scaleX *= container.scaleX;
						child.scaleY *= container.scaleY;
						changesInstances.push(child.name);
					}					
					var data:Object = parse(child, path, cap);
					if (child is Shape) {
						saveMeta(data, path);
					}
					return data;
				}
				path += '/'+cap;
				var children:Array = [];
				var meta:Object = {type: "sprite", children: children};
				
				if (container.numChildren == 0) {
					if (container.width > 0 && container.height > 0) {
						trace('container.numChildren == 0', container.width, container.height);
					}
					saveMeta(meta, path);
					return {type:"sprite", dir:cap, x:content.x, y:content.y, name:content.name};
				}
				
				
				//trace("sprite ", path, content.name);
				
				for (var i:uint = 0; i<container.numChildren; i++) { // по потомкам
					child = container.getChildAt(i);	
					child.alpha *= content.alpha;
					children.push(parse(child, path, String(i)));
				}
				saveMeta(meta, path);
				return {type:"sprite", dir:cap, x:content.x, y:content.y, name:content.name};
			}
			
			//====== сохранение метафайла ========
			private function saveMeta(data:Object, path:String):void {
				
				var fs:FileStream = new FileStream();
				fs.open(new File(path+'/meta.json'), FileMode.WRITE);
				fs.writeUTFBytes(JSON.encode(data, true));
				fs.close();
			}
			
			//======= создание png ===============
			private function writePng(source:DisplayObject, url:String, matrix:Matrix = null, alpha:Number = 1):Object {
				//trace('writePng', url, source.width, source.height);
				
				var shift:uint = 150;
				//var m:Matrix = new Matrix();
				//m.scale(source.scaleX, source.scaleY);
				if (matrix == null) {
					matrix = new Matrix();
				}
				matrix.translate(shift,shift);
										
				if (alpha == 1) {
					alpha = source.alpha;
				}
												
				var bd:BitmapData = new BitmapData(source.width + shift*2, source.height + shift*2, true, 0x000000);
				bd.draw(source, matrix, new ColorTransform(1,1,1, alpha/*source.alpha*/));
							
				var r:Rectangle = bd.getColorBoundsRect(0xFF000000, 0x00000000, false);
				//var r:Rectangle = bd.getColorBoundsRect(0xFFFFFF00, 0x00000000, false);
				
				//trace('rect', r.x, r.y, source.x, source.y, r.width, r.height, source.width, source.height);
				
				if (r.width == 0) {
					r.width = bd.width - shift*2;
					r.x += shift;
				}
				if (r.height == 0) {
					r.height = bd.height - shift*2;
					r.y += shift;
				}
				var bmdata:BitmapData = new BitmapData(r.width, r.height, true, 0x000000);
				bmdata.copyPixels(bd, r, new Point(0,0));
				
				var ba:ByteArray = png.encode(bmdata); 
				
			/*	var r:Rectangle = new Rectangle(50, 50);
				var bd:BitmapData = new BitmapData(source.width, source.height, true, 0x000000);
				bd.draw(source, null, new ColorTransform(1,1,1, source.alpha));
				var ba:ByteArray = png.encode(bd); */
				
				try {
					var fs:FileStream = new FileStream();
					fs.open(new File(url), FileMode.WRITE);
					fs.writeBytes(ba);
					fs.close();
				} catch (error:Error){
					Alert.show('Ошибка записи файла\n'+url, 'Ошибка');
				}
				return {x: r.x - 50, y:r.y - 50};
			}
			
			//========= выбор swf в проводнике ============
			protected function btSelectSwf_clickHandler(event:MouseEvent):void
			{
				var f:File = new File();
				f.addEventListener(FileListEvent.SELECT_MULTIPLE, onSelectSwf);
				f.browseForOpenMultiple('Выберите папку', [new FileFilter('SWF-файлы', '*.swf')]);
			}
			
			//========= выбраны swf =========
			private function onSelectSwf(event:FileListEvent):void {
				status = 'загрузка...';
				var f:File = event.currentTarget as File;
		
				f.removeEventListener(FileListEvent.SELECT_MULTIPLE, onSelectSwf);
				
				classes = [];
				liArray = [];
				index = 0;
				swfsUrl = (event.files[0].parent as File).url;
				tiSwfName.text = swfsUrl; 
				changesInstances = new Vector.<String>();
				var swfs:Array = [];
				urls = [];
				for each (f in event.files) {
					swfs.push(f.name);
					urls.push(f.url);
				}
				listSwfs.dataProvider = new ArrayCollection(swfs); // выводим имена swf-ок
				
				loadSwf();
			}
			
			// выбор папки экспорта
			private function btSelectDir_clickHandler(event:MouseEvent):void {
				var f:File = new File();
				f.addEventListener(Event.SELECT, onSelectDir);
				
				f.browseForDirectory('Выберите папку');
			}
			
			// выбрана папка экспорта
			private function onSelectDir(event:Event):void {
				var f:File = event.currentTarget as File;
				f.removeEventListener(Event.SELECT, onSelectDir);
				tiExportDir.text = f.url;
			}
			
			
			// swf загружена
			private function onLoadComplete(event:Event):void {
				
				//trace('onLoadComplete', index, urls[index]);
				
				// сохраняем имена классов swf-ки
				var swfName:String = (listSwfs.dataProvider as ArrayCollection).getItemAt(index) as String;
				var li:LoaderInfo = event.target as LoaderInfo;
				liArray[swfName] = li;
				var names:Array = getDefinitionNames(li); 
				names.sort();
				classes[swfName] = [];
				for each (var cap:String in names) {
					var obj:ObjectProxy = new ObjectProxy({swfName:cap, isSelect:true})
					classes[swfName].push(obj);
				}
					
				index++;
				if (index < urls.length) {
					loadSwf();
				} else {
					status = "загрузка завершена";
					btExport.enabled = true;
				}
			}
			
			private function loadSwf():void {
				var loader:Loader = new Loader();
				loader.contentLoaderInfo.addEventListener(Event.COMPLETE, onLoadComplete);
				loader.load(new URLRequest(urls[index]));
			}
			
			
			// клик по swf в списке
			protected function listSwfs_changeHandler(event:IndexChangeEvent):void
			{
				listSwfs.validateNow();
				listClasses.dataProvider = new ArrayCollection(classes[listSwfs.selectedItem]);
				(listClasses.dataProvider as ArrayCollection).refresh();
			}

			// выбрать все классы
			protected function chbSelectAll_changeHandler(event:Event):void
			{
				for each (var obj:ObjectProxy in classes[listSwfs.selectedItem]) {
					obj.isSelect = chbSelectAll.selected;
				}
				listClasses.validateNow();
			}

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:RadioButtonGroup id="isSwfRG"/>
		<!-- Разместить невизуальные элементы (например, службы или объекты значений) -->
	</fx:Declarations>
	<s:VGroup x="0" y="50" width="100%" height="100%" paddingLeft="50" paddingRight="50">
		<s:Label x="66" y="50" text="swfs" id="lbSwf"/>
		<s:HGroup width="100%">
			<s:TextInput width="100%" id="tiSwfName"/>
			<s:Button label="..." width="30" id="btSelectSwf" click="btSelectSwf_clickHandler(event)"/>
		</s:HGroup>
		<s:Label text="Папка экспорта"/>
		<s:HGroup width="100%">
			<s:TextInput width="100%" id="tiExportDir"/>
			<s:Button label="..." width="30" id="btSelectDir" click="btSelectDir_clickHandler(event)"/>
		</s:HGroup>
		<s:HGroup width="100%" height="100%">
			<s:VGroup width="100%" height="100%">
				<s:Label text="swf-файлы"/>
				<s:List width="100%" id="listSwfs" change="listSwfs_changeHandler(event)" height="100%"></s:List>
			</s:VGroup>
			<s:VGroup width="100%" height="100%">
				<s:Label text="Список классов"/>
				<s:List width="100%" id="listClasses" height="100%" itemRenderer="ListItemRenderer"></s:List>
				<s:CheckBox label="Выбрать все" id="chbSelectAll" selected="true" change="chbSelectAll_changeHandler(event)"/>
			</s:VGroup>
		</s:HGroup>
		
		<s:Button label="Экспорт" click="button1_clickHandler(event)" enabled="false" id="btExport"/>
		
		<mx:Canvas id="canva" width="100%" height="100"/>
	</s:VGroup>
	
</s:WindowedApplication>
