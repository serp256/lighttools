<?xml version="1.0"?>
<s:GridItemRenderer
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx">

	<fx:Script><![CDATA[
		import mx.binding.utils.BindingUtils;
		import mx.events.CollectionEvent;
		import mx.events.FlexEvent;
		import mx.events.FlexNativeMenuEvent;

		import ru.redspell.rasterizer.models.SwfsPack;

		import spark.components.DataGrid;
		import spark.components.gridClasses.GridSelectionMode;

		public static const CHECK_ALL:String = 'checkboxColumnRenderer_checkAll';
		public static const UNCHECK_ALL:String = 'checkboxColumnRenderer_uncheckAll';
		public static const CHECK_SELECTION:String = 'checkboxColumnRenderer_checkSelection';
		public static const UNCHECK_SELECTION:String = 'checkboxColumnRenderer_uncheckSelection';

		protected function menu_menuShowHandler(event:FlexNativeMenuEvent):void {
			var dp:ArrayCollection = grid.dataGrid.dataProvider as ArrayCollection;
			var menuDp:ArrayCollection = (flexContextMenu as FlexNativeMenu).dataProvider as ArrayCollection;
			var chkAllItem:Object = menuDp.getItemAt(0);
			var checkAll:Boolean = false;

			for each (var item:Object in dp.source) {
				if (!item[column.dataField]) {
					checkAll = true;
					break;
				}
			}

			if (checkAll) {
				chkAllItem.label = 'Check all';
				chkAllItem.action = CHECK_ALL;
			} else {
				chkAllItem.label = 'Uncheck all';
				chkAllItem.action = UNCHECK_ALL;
			}

			var dataGrd:DataGrid = grid.dataGrid;

			if (dataGrd.selectionMode == GridSelectionMode.MULTIPLE_ROWS) {
				if (menuDp.length < 2) {
					var chkSltnItem:Object = {};
					menuDp.addItem(chkSltnItem);
				} else {
					chkSltnItem = menuDp.getItemAt(1);
				}

				var checkSelection:Boolean = false;

				for each (var item:Object in dataGrd.selectedItems) {
					if (!item[column.dataField]) {
						checkSelection = true;
						break;
					}
				}

				if (checkSelection) {
					chkSltnItem.label = 'Check selection';
					chkSltnItem.action = CHECK_SELECTION;
				} else {
					chkSltnItem.label = 'Uncheck selection';
					chkSltnItem.action = UNCHECK_SELECTION;
				}
			} else if (menuDp.length > 1) {
				menuDp.removeItemAt(1);
			}

			menuDp.refresh();
		}

		protected function menu_itemClickHandler(event:FlexNativeMenuEvent):void {
			var dataGrid:DataGrid = grid.dataGrid;
			var dp:ArrayCollection = grid.dataGrid.dataProvider as ArrayCollection;

			if (event.item.action == CHECK_ALL || event.item.action == UNCHECK_ALL) {
				var items:Array = dp.source;
				var chkboxVal:Boolean = event.item.action == CHECK_ALL;
			} else {
				items = [];
				chkboxVal = event.item.action == CHECK_SELECTION;

				for each (var sltnItem:Object in dataGrid.selectedItems) {
					items.push(sltnItem);
				}
			}

			for each (var item:Object in items) {
				item[column.dataField] = chkboxVal;
			}

			var selection:Vector.<Object> = dataGrid.selectedItems;

			dp.refresh();
			dataGrid.selectedItems = selection;
		}

		public function set dataFieldValue(value:Boolean):void {
			data[column.dataField] = value;
		}
	]]></fx:Script>

	<fx:Binding source="checked.selected" destination="dataFieldValue"/>

	<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
		<s:CheckBox id="checked" selected="{data[column.dataField]}"/>
	</s:HGroup>

	<s:flexContextMenu>
		<mx:FlexNativeMenu labelField="label" menuShow="menu_menuShowHandler(event)" itemClick="menu_itemClickHandler(event)">
			<mx:dataProvider>
				<mx:ArrayCollection>
					<fx:Object/>
					<fx:Object/>
				</mx:ArrayCollection>
			</mx:dataProvider>
		</mx:FlexNativeMenu>
	</s:flexContextMenu>
</s:GridItemRenderer>
