<?xml version="1.0"?>
<s:WindowedApplication
	xmlns:view="ru.redspell.rasterizer.views.*"
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	title="Rasterizer"
	width="825"
	height="450"
	initialize="init()"
	addedToStage="addedToStageHandler(event)">

	<fx:Script><![CDATA[
		import mx.core.IFlexDisplayObject;
		import mx.managers.FocusManager;
		import mx.managers.PopUpManager;

		import ru.nazarov.asmvc.command.ICommandError;
		import ru.redspell.rasterizer.views.ErrorWindow;

		protected function addedToStageHandler(event:Event):void {
			stage.addEventListener(KeyboardEvent.KEY_DOWN, stage_keyDownHandler);
		}

		protected function init():void {
			Facade.runCommand(Facade.commandsFactory.getInitCommand());
		}

		public function setLock(lock:Boolean):void {
			rootGroup.enabled = !lock;
		}

		public function setStatus(status:String, hide:Boolean = false, lock:Boolean = false):void {
			statusText.text = status;
			setLock(lock);

			if (hide) {
				setTimeout(setStatus, 3000, '', false);
			}
		}

		protected function popup_closeHandler(event:Event):void {
			var popup:IFlexDisplayObject = event.target as IFlexDisplayObject;

			PopUpManager.removePopUp(popup);
			popup.removeEventListener(Event.CLOSE, popup_closeHandler);
		}

		public function showPopup(popup:IFlexDisplayObject):void {
			PopUpManager.addPopUp(popup, this, true);
			PopUpManager.centerPopUp(popup);

			popup.addEventListener(Event.CLOSE, popup_closeHandler);
		}

		public function reportError(error:ICommandError):void {
			var errorWin:ErrorWindow = new ErrorWindow();

			errorWin.error = error;
			showPopup(errorWin);
		}

		protected function stage_keyDownHandler(event:KeyboardEvent):void {
			if (event.ctrlKey) {
				switch (event.keyCode) {
					case Keyboard.N:
						Facade.runCommand(Facade.commandsFactory.getNewProjectCommand());
						break;

					case Keyboard.O:
						Facade.runCommand(Facade.commandsFactory.getOpenProjectCommand());
						break;

					case Keyboard.S:
						Facade.runCommand(Facade.commandsFactory.getSaveProjectCommand());
						break;

					case Keyboard.E:
						Facade.runCommand(Facade.commandsFactory.getExportCommand(Facade.proj));
						break;
				}
			}
		}
	]]></fx:Script>

	<s:VGroup width="100%" height="100%">
		<view:MainMenu/>

		<s:HGroup id="rootGroup" width="100%" height="100%" paddingLeft="10" paddingBottom="10" paddingRight="10" paddingTop="10" enabled="false">
			<view:PacksGrid id="packsList" width="20%" height="100%" expandList="{swfsList}"/>
			<view:SwfsGrid id="swfsList" width="35%" height="100%" expandList="{classesGrid}"/>
			<view:ClassesGrid id="classesGrid" width="45%" height="100%"/>
		</s:HGroup>
	</s:VGroup>
</s:WindowedApplication>
